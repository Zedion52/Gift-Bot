import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import LabeledPrice, PreCheckoutQuery

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–¢–ï–°–¢–û–í–´–ï!)
API_TOKEN = "5000473503:AAEgrgzmUqXbs3JIH0rRWl0oiv3eq7gCUsU/test"  # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
PAYMENT_PROVIDER_TOKEN = "TEST:5000473503"  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Ç–æ–∫–µ–Ω
OWNER_ID = 123456789  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∏–º–∏—Ç–∞—Ü–∏—è)
user_balance = {}


# –ö–æ–º–∞–Ω–¥–∞: –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å (–¢–ï–°–¢–û–í–ê–Ø!)
@dp.message(commands=["pay"])
async def send_invoice(message: types.Message):
    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        await message.reply("–£–∫–∞–∂–∏ —Å—É–º–º—É –≤ –∑–≤–µ–∑–¥–∞—Ö: /pay 50")
        return

    amount = int(args[1])
    if amount <= 0:
        await message.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
        return

    await bot.send_invoice(
        chat_id=message.chat.id,
        title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–¢–ï–°–¢)",
        description=f"–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} –∑–≤–µ–∑–¥",
        payload=str(amount),
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="USD",
        prices=[LabeledPrice(label="–¢–µ—Å—Ç–æ–≤—ã–µ –∑–≤–µ–∑–¥—ã", amount=amount * 100)],
        start_parameter="test_payment",
        provider_data=None,
        send_email_to_provider=False
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@dp.pre_checkout_query(lambda q: True)
async def checkout_process(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message(lambda message: message.successful_payment)
async def process_successful_payment(message: types.Message):
    user_id = message.from_user.id
    amount = int(message.successful_payment.total_amount / 100)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    user_balance[user_id] = user_balance.get(user_id, 0) + amount

    await message.reply(f"‚úÖ –¢–ï–°–¢–û–í–´–ô –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –∑–≤–µ–∑–¥!\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_balance[user_id]} –∑–≤–µ–∑–¥")


# –ö–æ–º–∞–Ω–¥–∞: –°–ø–∞–º –ø–æ–¥–∞—Ä–∫–∞–º–∏ (–¢–û–õ–¨–ö–û –¢–ï–°–¢–û–í–´–ô –°–ï–†–í–ï–†!)
@dp.message(commands=["spam"])
async def send_gifts(message: types.Message):
    if message.from_user.id != OWNER_ID:
        await message.reply("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
        return

    args = message.text.split()
    count = int(args[1]) if len(args) > 1 and args[1].isdigit() else 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—Ä—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    await message.reply(f"üéÇ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–∞–º –ø–æ–¥–∞—Ä–∫–∞–º–∏ ({count} —à—Ç.)")

    for i in range(count):
        await bot.send_message(OWNER_ID, "üéÇ [–¢–ï–°–¢] –¢–µ–±–µ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫!")
        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã Telegram –Ω–µ –±–∞–Ω–∏–ª


# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω –¢–û–õ–¨–ö–û —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
if "/test" not in API_TOKEN:
    raise RuntimeError("‚ùå –ë–û–¢ –î–û–õ–ñ–ï–ù –†–ê–ë–û–¢–ê–¢–¨ –¢–û–õ–¨–ö–û –ù–ê –¢–ï–°–¢–û–í–û–ú –°–ï–†–í–ï–†–ï!")

# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Amvera
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ 24/7
